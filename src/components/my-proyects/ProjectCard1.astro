---
import { Image } from 'astro:assets';
import HtmlIcon from '../icons/HtmlIcon.astro';
import CssIcon from '../icons/CssIcon.astro';
import JavascriptIcon from '../icons/JavascriptIcon.astro';
import TailwindIcon from '../icons/TailwindIcon.astro';
import ReactIcon from '../icons/ReactIcon.astro';
/** GlassProjectCard - componente reutilizable con estilo glassmorphism */
const {
  title = 'Background Generator',
  // technologies puede pasarse como array de componentes (p. ej. [HtmlIcon, ReactIcon])
  // o como objetos { component, class, title } o como strings compatibles con iconMap.
  technologies = [HtmlIcon, CssIcon, JavascriptIcon, TailwindIcon, ReactIcon],
  description = 'Un background re loco',
  img = '../../assets/images/Bg-Generator.webp',
  repo = 'https://github.com/JoaquinCalligaro/Background-Generator',
  live = 'https://background-generator-final.netlify.app/',
} = Astro.props;

const iconMap = {
  html: HtmlIcon,
  css: CssIcon,
  js: JavascriptIcon,
  tailwind: TailwindIcon,
  react: ReactIcon,
};
---

<!-- Contenedor principal: glassmorphism con Tailwind (incluye variantes dark) -->
<article
  class={`w-auto inline-block px-5 py-5 transition-transform duration-150 transform shadow-sm bg-white/60 dark:bg-gray-900/50 backdrop-blur-md dark:backdrop-blur-sm border border-white/20 dark:border-white/10 rounded-2xl`}
  aria-labelledby="card-title"
>
  <!-- Media: imagen o placeholder (mostrar completa, sin recorte) -->
  <div class="relative flex justify-center py-2">
    <!-- Contenedor que adapta su ancho al contenedor padre (sin max-w en px) -->
    <div
      class="flex w-full items-center justify-center overflow-hidden bg-transparent"
    >
      {
        img ? (
          typeof img === 'string' ? (
            <img
              src={img}
              alt={title}
              loading="lazy"
              class="h-full w-full rounded-xl object-contain"
            />
          ) : (
            <Image
              src={img}
              alt={title}
              class="h-full w-full rounded-xl object-contain"
              sizes="(max-width:640px) 90vw, 480px"
            />
          )
        ) : (
          <div class="h-full w-full rounded-xl border border-white/5 bg-transparent dark:border-white/3" />
        )
      }
    </div>
  </div>

  <!-- Contenido: título y descripción -->
  <div class="p-4">
    <div class="flex items-center">
      <h3
        id="card-title"
        class="text-lg font-semibold text-gray-900 dark:text-white"
      >
        {title}
      </h3>
    </div>

    <!-- Tecnologías: mostrar iconos SVG debajo del título -->
    {
      technologies && technologies.length > 0 ? (
        <div class="mt-3 flex flex-wrap items-center gap-2">
          {technologies.map((item) => {
            // item puede ser:
            // - un componente (p. ej. HtmlIcon)
            // - un objeto { component: Componente, class, title }
            // - una string key que mapea a iconMap
            let Component = null;
            let cls = 'h-6 w-6';
            let title = '';

            if (
              typeof item === 'function' ||
              (typeof item === 'object' && item.render)
            ) {
              // componente directo (Astro component o función)
              Component = item;
            } else if (typeof item === 'object' && item.component) {
              Component = item.component;
              cls = item.class ?? cls;
              title = item.title ?? title;
            } else if (typeof item === 'string') {
              const key = item;
              Component = iconMap[key];
            }

            if (!Component) return null;
            return <Component class={cls} title={title} />;
          })}
        </div>
      ) : null
    }

    <p class="mt-2 text-sm text-slate-600 dark:text-slate-300">{description}</p>
  </div>

  <!-- Botón centrado -->
  <div class="flex items-center justify-center gap-20 pt-6 pb-6">
    <a
      href={repo}
      class="inline-block rounded-md bg-slate-800 px-4 py-2 text-sm text-white transition hover:bg-slate-700"
      target="_blank"
      rel="noopener noreferrer">Ver Repositorio</a
    >

    {
      live ? (
        <a
          href={live}
          class="inline-block rounded-md border border-slate-300 px-4 py-2 text-sm text-slate-800 transition hover:bg-slate-800 hover:text-white dark:text-slate-100"
          target="_blank"
          rel="noopener noreferrer"
        >
          Ver en vivo
        </a>
      ) : (
        <button
          class="inline-block cursor-not-allowed rounded-md border border-slate-200 px-4 py-2 text-sm text-slate-400"
          disabled
        >
          Ver en vivo
        </button>
      )
    }
  </div>
</article>
