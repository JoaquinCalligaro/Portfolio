---
import { Image } from 'astro:assets';
import gitSvg from '../../assets/GitHub.svg';
import liveSvg from '../../assets/Live.svg';
import defaultImg from '../../assets/images/Bg-Generator.webp';
import HtmlIcon from '../icons/HtmlIcon.astro';
import CssIcon from '../icons/CssIcon.astro';
import JavascriptIcon from '../icons/JavascriptIcon.astro';
import TailwindIcon from '../icons/TailwindIcon.astro';
import ReactIcon from '../icons/ReactIcon.astro';
import GitIcon from '../icons/GitIcon.astro';
import TypescriptIcon from '../icons/TypescriptIcon.astro';
/** GlassProjectCard - componente reutilizable con estilo glassmorphism */
const {
  title = 'Background Generator',
  // technologies puede pasarse como array de componentes, objetos o strings (keys de iconMap).
  // Por defecto usamos keys para que los iconos nuevos se muestren con el mismo estilo.
  technologies = ['html', 'css', 'js', 'tailwind', 'react', 'typescript'],
  description = 'Generador de fondos animados con 8 diseños y más de 25 animaciones personalizables en tiempo real (colores, velocidad e intensidad).',
  img = defaultImg,
  repo = 'https://github.com/JoaquinCalligaro/Background-Generator',
  live = 'https://background-generator-final.netlify.app/',
} = Astro.props;

const iconMap = {
  html: HtmlIcon,
  css: CssIcon,
  js: JavascriptIcon,
  tailwind: TailwindIcon,
  react: ReactIcon,
  git: GitIcon,
  typescript: TypescriptIcon,
};

// Helper: normaliza entries de `technologies` a { Component, cls, title }
const resolveTechnology = (item) => {
  if (!item) return null;
  const base = { cls: 'h-6 w-6', title: '' };
  if (typeof item === 'string') return { Component: iconMap[item], ...base };
  if (
    typeof item === 'function' ||
    (typeof item === 'object' && item && item.render)
  )
    return { Component: item, ...base };
  if (typeof item === 'object' && item.component)
    return {
      Component: item.component,
      cls: item.class ?? base.cls,
      title: item.title ?? base.title,
    };
  return null;
};
---

<!-- Contenedor principal: glassmorphism con Tailwind (incluye variantes dark) -->
<article
  class={`w-auto inline-block px-5 py-5 transition-transform duration-150 transform shadow-sm bg-white/60 dark:bg-gray-900/50 backdrop-blur-md dark:backdrop-blur-sm border border-white/20 dark:border-white/10 rounded-2xl`}
  aria-labelledby="card-title"
>
  <!-- Media: imagen o placeholder (mostrar completa, sin recorte) -->
  <div class="relative flex justify-center py-2">
    <!-- Contenedor que adapta su ancho al contenedor padre (sin max-w en px) -->
    <div
      class="flex h-48 w-full items-center justify-center overflow-hidden bg-transparent sm:h-40 md:h-48"
    >
      {
        img ? (
          typeof img === 'string' ? (
            <img
              src={img}
              alt={title}
              loading="lazy"
              class="h-full w-full rounded-xl object-contain"
            />
          ) : (
            <Image
              src={img}
              alt={title}
              class="h-full w-full rounded-xl object-contain"
              sizes="(max-width:640px) 90vw, 480px"
            />
          )
        ) : (
          <div class="h-full w-full rounded-xl border border-white/5 bg-transparent dark:border-white/3" />
        )
      }
    </div>
  </div>

  <!-- título -->
  <div class="mb-4 p-4">
    <div class="flex items-center">
      <h3
        id="card-title"
        class="text-lg font-semibold text-gray-900 dark:text-white"
      >
        {title}
      </h3>
    </div>

    <!-- Tecnologías: mostrar iconos SVG debajo del título -->
    {
      technologies && technologies.length > 0 ? (
        <div class="my-4 mt-4 flex flex-wrap items-center gap-2">
          {technologies.map((item) => {
            const resolved = resolveTechnology(item);
            if (!resolved) return null;
            const { Component, cls, title } = resolved;
            return <Component class={cls} title={title} />;
          })}
        </div>
      ) : null
    }
    <!-- descripción -->
    <p class="text-md mt-6 px-1 text-slate-600 dark:text-slate-300">
      {description}
    </p>
  </div>

  <!-- Botón centrado -->
  <div class="flex items-center justify-center gap-20 pt-6 pb-6">
    <a
      href={repo}
      class="inline-flex items-center gap-2 rounded-md border border-slate-300 bg-gray-200 px-4 py-2 text-sm text-slate-800 transition hover:bg-slate-800 hover:text-white dark:bg-gray-500/40 dark:text-slate-100"
      target="_blank"
      rel="noopener noreferrer"
    >
      <Image src={gitSvg} alt="Git" class="h-4 w-4" loading="lazy" />
      <span>Ver Repositorio</span>
    </a>
    <!-- Botón ver en vivo -->
    <a
      href={live || '#'}
      class="inline-flex items-center gap-2 rounded-md border border-slate-300 bg-gray-200 px-4 py-2 text-sm text-slate-800 transition hover:bg-slate-800 hover:text-white dark:bg-gray-500/40 dark:text-slate-100"
      target="_blank"
      rel="noopener noreferrer"
    >
      <Image src={liveSvg} alt="Live" class="h-4 w-4" loading="lazy" />
      <span>Ver en vivo</span>
    </a>
  </div>
</article>
