---
import { Image } from 'astro:assets';
import RepositoryBtn from '../ui/RepositoryBtn.astro';
import LiveBtn from '../ui/LiveBtn.astro';
import '../../styles/projects.css';
import '../../styles/projects.css';
import img1 from '../../assets/images/js-calculator/js-calculator-1.webp';
import img2 from '../../assets/images/js-calculator/js-calculator-2.webp';
import HtmlIcon from '../icons/HtmlIcon.astro';
import CssIcon from '../icons/CssIcon.astro';
import JavascriptIcon from '../icons/JavascriptIcon.astro';
import TailwindIcon from '../icons/TailwindIcon.astro';
import LocalizedText from '../language/LocalizedText.astro';
import { translations } from '../../data/translations';
// TÃ­tulos y descripciones vienen de translations.ts (idioma fijo: ES)
const props = Astro.props || {};
const serverTitle =
  props.title ?? translations['ES'].projects.jsCalculator.title;
const title = props.title ?? null;
const technologies = props.technologies ?? [
  'html',
  'css',
  'tailwind',
  'javascript',
];
const images = props.images ?? [img1, img2];
const repo = 'https://github.com/JoaquinCalligaro/Gif-App';
const live = 'https://gif-app-beta.netlify.app/';
const sliderId = `slider-${Math.random().toString(36).slice(2, 9)}`;

const iconMap = {
  html: HtmlIcon,
  css: CssIcon,
  tailwind: TailwindIcon,
  javascript: JavascriptIcon,
};

const finalImages =
  Array.isArray(images) && images.length > 0 ? images : [img1, img2];

const resolveTechnology = (item) => {
  if (!item) return null;
  const base = { cls: 'h-6 w-6', title: '' };
  if (typeof item === 'string') {
    const Component = iconMap[item.toLowerCase()];
    return Component ? { Component, ...base } : null;
  }
  if (typeof item === 'object' && item.component)
    return {
      Component: item.component,
      cls: item.class ?? base.cls,
      title: item.title ?? base.title,
    };
  return null;
};
---

<article
  class="card-root flex h-full transform flex-col rounded-2xl border border-white/20 bg-white/60 px-4 pb-6 shadow-sm backdrop-blur-md transition-transform duration-500 ease-in-out hover:scale-110 dark:border-white/10 dark:bg-gray-900/50"
  style="will-change: transform;"
>
  <div class="card-inner flex h-full flex-col justify-between">
    <div id={sliderId} class="w-full max-w-full">
      <div
        class="group relative h-64 w-full overflow-hidden rounded-sm bg-transparent sm:h-56 md:h-64 dark:bg-transparent"
      >
        <div
          class="slider-track absolute inset-0 flex transition-transform duration-500 ease-in-out"
          style={`transform: translateX(0%); width: calc(100% * ${finalImages.length});`}
        >
          {
            finalImages.map((src, index) => (
              <div
                class="slide flex h-full items-center justify-center overflow-hidden rounded-sm"
                style={`width: calc(100% / ${finalImages.length}); flex-shrink: 0;`}
              >
                <Image
                  src={src}
                  alt={serverTitle + ' - Imagen ' + (index + 1)}
                  class="block max-h-full max-w-full rounded-xl object-contain"
                  sizes="(max-width:640px) 90vw, (max-width:1024px) 720px, 1080px"
                  quality={90}
                  loading="lazy"
                />
              </div>
            ))
          }
        </div>

        <button
          type="button"
          class="slider-prev absolute top-1/2 left-2 z-30 -translate-y-1/2 rounded-full bg-white/90 p-2 shadow-lg transition-all duration-200 hover:scale-110 hover:bg-white dark:bg-gray-800/90 dark:hover:bg-gray-700"
          aria-label="Imagen anterior"
        >
          <svg
            class="h-4 w-4 text-slate-800 dark:text-white"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            ><path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M15 18l-6-6 6-6"></path></svg
          >
        </button>

        <button
          type="button"
          class="slider-next absolute top-1/2 right-2 z-30 -translate-y-1/2 rounded-full bg-white/90 p-2 shadow-lg transition-all duration-200 hover:scale-110 hover:bg-white dark:bg-gray-800/90 dark:hover:bg-gray-700"
          aria-label="Imagen siguiente"
        >
          <svg
            class="h-4 w-4 text-slate-800 dark:text-white"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            ><path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M9 6l6 6-6 6"></path></svg
          >
        </button>
      </div>

      {
        finalImages.length > 1 && (
          <div class="-mt-4 flex items-center justify-center gap-1">
            {finalImages.map((_, i) => (
              <button
                type="button"
                class="slider-dot h-2 w-2 cursor-pointer rounded-full bg-gray-400 transition-all duration-200 hover:bg-gray-600 dark:bg-gray-400 dark:hover:bg-gray-600"
                data-index={i}
                aria-label={'Ir a imagen ' + (i + 1)}
              />
            ))}
          </div>
        )
      }
    </div>

    <div class="mb-4 p-4">
      <div class="flex items-center">
        <h3 class="text-lg font-semibold text-gray-900 dark:text-white">
          {title ?? <LocalizedText key="projects.jsCalculator.title" />}
        </h3>
      </div>

      {
        technologies && technologies.length > 0 && (
          <div class="my-4 mt-4 flex flex-wrap items-center gap-2">
            {technologies.map((item, idx) => {
              const resolved = resolveTechnology(item);
              if (!resolved) return null;
              const { Component, cls, title: techTitle } = resolved;
              // aplicar la clase de prueba solo al primer icono
              const extra = idx === 0 ? ' border-anim-only' : '';
              return <Component class={`${cls}${extra}`} title={techTitle} />;
            })}
          </div>
        )
      }

      <p
        class="pt-1.5 text-sm leading-relaxed text-slate-600 dark:text-slate-300"
      >
        <LocalizedText key="projects.jsCalculator.description" />
      </p>
    </div>

    <div
      class="flex items-center justify-center gap-15 pt-4 pb-2 sm:gap-15 md:gap-10 xl:gap-25"
    >
      <RepositoryBtn href={repo} />
      <LiveBtn href={live} />
    </div>

    <script type="module" define:vars={{ sliderId }}>
      import initSlider from '/js/slider/slider-client.js';
      initSlider(sliderId);
    </script>
  </div>
</article>
