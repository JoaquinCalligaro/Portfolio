---
import type { ImageMetadata } from 'astro';

export interface Props {
  id: string;
  titleKey: string;
  descriptionKey: string;
  repo: string;
  live: string;
  technologies: string[];
  images: ImageMetadata[]; // Usar ImageMetadata en lugar de any[]
}

const props = (Astro.props as Props) || ({} as Props);
const {
  id,
  titleKey,
  descriptionKey,
  repo,
  live,
  technologies = [],
  images = [],
} = props;

import { Image } from 'astro:assets';
import RepositoryBtn from '../ui/RepositoryBtn.astro';
import LiveBtn from '../ui/LiveBtn.astro';
import LocalizedText from '../language/LocalizedText.astro';
import HtmlIcon from '../icons/HtmlIcon.astro';
import CssIcon from '../icons/CssIcon.astro';
import JavascriptIcon from '../icons/JavascriptIcon.astro';
import TailwindIcon from '../icons/TailwindIcon.astro';
import ReactIcon from '../icons/ReactIcon.astro';
import TypescriptIcon from '../icons/TypescriptIcon.astro';
import '../../styles/projects.css';

// Mapeo de tecnologías a iconos
const iconMap = {
  html: HtmlIcon,
  css: CssIcon,
  tailwind: TailwindIcon,
  javascript: JavascriptIcon,
  typescript: TypescriptIcon,
  react: ReactIcon,
};

// Función para resolver tecnología a componente de icono
const resolveTechnology = (item) => {
  if (!item) return null;
  const base = { cls: 'h-6 w-6', title: '' };
  if (typeof item === 'string') {
    const Component = iconMap[item.toLowerCase()];
    return Component ? { Component, ...base } : null;
  }
  if (typeof item === 'object' && item.component)
    return {
      Component: item.component,
      cls: item.class ?? base.cls,
      title: item.title ?? base.title,
    };
  return null;
};
---

<article
  id={id}
  class="card-root flex h-full transform flex-col rounded-2xl border border-white/20 bg-gray-100/30 px-4 pb-6 shadow-sm backdrop-blur-md transition-transform duration-500 ease-in-out hover:scale-105 hover:border-cyan-400/30 dark:border-white/10 dark:bg-gray-900/30 dark:hover:border-cyan-400/50"
  style="will-change: transform;"
>
  <div class="card-inner flex h-full flex-col justify-between">
    <div class="w-full max-w-full">
      {
        images && images.length > 0 ? (
          <div class="group relative h-64 w-full overflow-hidden rounded-sm bg-transparent sm:h-56 md:h-64 dark:bg-transparent">
            <div class="slide flex h-full items-center justify-center overflow-hidden rounded-sm">
              <Image
                src={images[0]}
                alt={`${id} - Imagen 1`}
                class="block max-h-full max-w-full rounded-xl object-contain"
                sizes="(max-width:640px) 90vw, (max-width:1024px) 720px, 1080px"
                quality={90}
                loading="lazy"
              />
            </div>
          </div>
        ) : (
          <div class="h-64 w-full rounded-sm bg-gray-200 sm:h-56 md:h-64 dark:bg-gray-800" />
        )
      }
    </div>

    <div class="mb-4 p-4">
      <div class="flex items-center">
        <h3 class="text-lg font-semibold text-gray-900 dark:text-white">
          {titleKey ? <LocalizedText key={titleKey} /> : ''}
        </h3>
      </div>

      {
        technologies && technologies.length > 0 && (
          <div class="my-4 mt-4 flex flex-wrap items-center gap-2">
            {technologies.map((item) => {
              const resolved = resolveTechnology(item);
              if (!resolved) return null;
              const { Component, cls, title: techTitle } = resolved;
              return <Component class={cls} title={techTitle} />;
            })}
          </div>
        )
      }

      <p
        class="pt-1.5 text-sm leading-relaxed text-slate-600 dark:text-slate-300"
      >
        {descriptionKey ? <LocalizedText key={descriptionKey} /> : ''}
      </p>
    </div>

    <div
      class="flex items-center justify-center gap-15 pt-4 pb-2 sm:gap-15 md:gap-10 xl:gap-25"
    >
      <RepositoryBtn href={repo} />
      <LiveBtn href={live} />
    </div>
  </div>
</article>
