---
// Componente botón reutilizable centralizando clases Tailwind.
// Props:
//  - href?: string -> si se pasa, renderiza un <a>, sino un <button>
//  - class?: string -> clases extra que el consumidor quiera añadir
//  - ariaLabel?: string
const { href, class: extraClass = '', ariaLabel } = Astro.props;

// Clases base - cambiar aquí para afectar a TODOS los botones que usen este componente.
// Las clases de color deben definirse aquí usando Tailwind, no importar de otro módulo.
const base = [
  'nav-hover-light',
  'nav-hover-dark',
  'relative',
  'rounded-lg',
  'px-4',
  'py-2',
  'text-gray-950',
  'dark:text-gray-100',
  'transition-all',
  'duration-400',
  'hover:scale-102',
  'hover:text-gray-950',
  'dark:hover:text-gray-100',
  'active:scale-98',
  'active:text-amber-700',
  // color classes (copiado de SubmitBtn para reutilizar visualmente)
  'bg-gradient-to-r',
  'from-blue-400',
  'to-cyan-400',
  'dark:from-blue-600',
  'dark:to-cyan-600',
  'text-white',
  'hover:from-blue-500',
  'hover:to-blue-500',
  'dark:hover:from-blue-700',
  'dark:hover:to-cyan-700',
  'focus:ring-4',
  'focus:ring-blue-200/40',
  'dark:focus:ring-blue-300/30',
  // Añade aquí clases globales que quieras (por ejemplo: 'border', 'border-amber-600')
].join(' ');

const classes = `${base} ${extraClass}`.trim();
---

{
  href ? (
    <a href={href} class={classes} aria-label={ariaLabel}>
      <slot />
    </a>
  ) : (
    <button class={classes} aria-label={ariaLabel}>
      <slot />
    </button>
  )
}
