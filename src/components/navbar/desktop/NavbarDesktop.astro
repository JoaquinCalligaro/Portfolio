---
// icons are rendered inside LanguageToggle
import MoonIcon from '../../../assets/svg/moon.svg';
import SunIcon from '../../../assets/svg/sun.svg';
import LanguageToggle from '../../language/LanguageToggle.astro';
import LocalizedText from '../../language/LocalizedText.astro';
---

<header
  id="navbar-header"
  class="header-backdrop-blur dark:navbar-glow fixed top-0 right-0 left-0 z-50 mx-auto flex max-w-4xl flex-wrap items-center justify-between rounded-2xl border-2 border-gray-400/30 bg-gray-400/10 px-5 py-4 transition-transform duration-300 ease-in-out dark:border-black/40 dark:bg-black/20"
>
  <div></div>

  <div class="flex items-center gap-3 px-3 text-gray-900 sm:order-1">
    <!-- Theme Toggle Button -->
    <button
      title="Theme Toggle"
      aria-label="Theme Toggle"
      id="theme-toggle"
      class="glow-hover action-button flex items-center"
    >
      <SunIcon id="theme-sun-icon" class="mx-2 size-6" aria-label="Sun Icon" />
      <MoonIcon
        id="theme-moon-icon"
        class="mx-2 size-6"
        aria-label="Moon Icon"
      />
    </button>

    <!-- Language Toggle Button -->
    <LanguageToggle />

    <!-- Mobile Menu Toggle -->
    <button
      title="Navbar Toggle"
      aria-label="Navbar Toggle"
      id="navbar-toggle"
      class="glow-hover action-button sm:hidden dark:text-white"
    >
      <svg
        aria-label="Menu Icon"
        id="navbar-menu-icon"
        class="mx-3 size-6"
        fill="currentColor"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 448 512"
      >
        <path
          d="M0 96C0 78.3 14.3 64 32 64l384 0c17.7 0 32 14.3 32 32s-14.3 32-32 32L32 128C14.3 128 0 113.7 0 96zM0 256c0-17.7 14.3-32 32-32l384 0c17.7 0 32 14.3 32 32s-14.3 32-32 32L32 288c-17.7 0-32-14.3-32-32zM448 416c0 17.7-14.3 32-32 32L32 448c-17.7 0-32-14.3-32-32s14.3-32 32-32l384 0c17.7 0 32 14.3 32 32z"
        ></path>
      </svg>
      <svg
        aria-label="Close Menu Icon"
        id="navbar-x-icon"
        class="mx-3 hidden size-6"
        fill="currentColor"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 384 512"
      >
        <path
          d="M342.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 210.7 86.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L146.7 256 41.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 301.3 297.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L237.3 256 342.6 150.6z"
        ></path>
      </svg>
    </button>
  </div>

  <nav
    id="navbar"
    class="dark:navbar-glow hidden w-full -translate-y-[200%] rounded-sm p-4 text-sm transition-transform sm:static sm:mt-0 sm:block sm:w-auto sm:translate-y-0 sm:border-none sm:p-0 lg:text-base"
  >
    <!-- Mobile Navigation (original) -->
    <ul
      id="navbar-links"
      class="flex flex-col items-center gap-8 font-semibold sm:hidden"
    >
      <li>
        <a href="#tech-stack" class="nav-hover-light nav-hover-dark"
          ><LocalizedText key="navbar.home" fallback="Tech Stack" /></a
        >
      </li>
      <li>
        <a href="#projects" class="nav-hover-light nav-hover-dark"
          ><LocalizedText key="navbar.tech" fallback="Projects" /></a
        >
      </li>
      <li>
        <a href="#about" class="nav-hover-light nav-hover-dark"
          ><LocalizedText key="navbar.projects" fallback="About" /></a
        >
      </li>
      <li>
        <a href="#contact" class="nav-hover-light nav-hover-dark"
          ><LocalizedText key="navbar.contact" fallback="Contact" /></a
        >
      </li>
    </ul>

    <!-- Desktop Glass Navigation -->
    <div class="glass-nav-wrapper hidden sm:flex">
      <input type="radio" name="nav-section" id="glass-tech" checked />
      <label for="glass-tech" data-target="#tech-stack">
        <LocalizedText key="navbar.home" fallback="Tech Stack" />
      </label>

      <input type="radio" name="nav-section" id="glass-projects" />
      <label for="glass-projects" data-target="#projects">
        <LocalizedText key="navbar.tech" fallback="Projects" />
      </label>

      <input type="radio" name="nav-section" id="glass-about" />
      <label for="glass-about" data-target="#about">
        <LocalizedText key="navbar.projects" fallback="About" />
      </label>

      <input type="radio" name="nav-section" id="glass-contact" />
      <label for="glass-contact" data-target="#contact">
        <LocalizedText key="navbar.contact" fallback="Contact" />
      </label>

      <div class="glass-nav-glider"></div>
    </div>
  </nav>
</header>

<script is:inline>
  // Keep menu toggle, theme toggle and scroll behavior. Language handled by LanguageToggle + T component.
  const navbar = document.getElementById('navbar');
  const navbarToggle = document.getElementById('navbar-toggle');
  const navbarXIcon = document.getElementById('navbar-x-icon');
  const navbarMenuIcon = document.getElementById('navbar-menu-icon');

  if (navbarToggle) {
    navbarToggle.addEventListener('click', () => {
      if (navbarXIcon) navbarXIcon.classList.toggle('hidden');
      if (navbarMenuIcon) navbarMenuIcon.classList.toggle('hidden');
      if (navbar) navbar.classList.toggle('hidden');

      document.body.style.transition = 'padding-top 0.6s ease-in-out 0.4s';
      const isMenuOpen = navbar && !navbar.classList.contains('hidden');
      document.body.style.paddingTop = isMenuOpen ? '100px' : '20px';

      setTimeout(() => {
        if (navbar) navbar.classList.toggle('-translate-y-[200%]');
      }, 10);
    });
  }

  const themeToggle = document.getElementById('theme-toggle');
  const themeMoonIcon = document.getElementById('theme-moon-icon');
  const themeSunIcon = document.getElementById('theme-sun-icon');

  const isDarkColorThemeSet = localStorage.getItem('color-theme') === 'dark';
  const userPrefersDarkTheme =
    window.matchMedia &&
    window.matchMedia('(prefers-color-scheme: dark)').matches &&
    !localStorage.getItem('color-theme');

  if (isDarkColorThemeSet || userPrefersDarkTheme) {
    setDarkTheme();
  } else {
    setLightTheme();
  }

  if (themeToggle) {
    themeToggle.addEventListener('click', () => {
      const colorTheme = localStorage.getItem('color-theme');
      if (colorTheme === 'dark') {
        setLightTheme();
      } else {
        setDarkTheme();
      }
    });
  }

  function setLightTheme() {
    document.documentElement.classList.remove('dark');
    localStorage.setItem('color-theme', 'light');
    themeMoonIcon.classList.remove('hidden');
    themeSunIcon.classList.add('hidden');
  }

  function setDarkTheme() {
    localStorage.setItem('color-theme', 'dark');
    document.documentElement.classList.add('dark');
    themeMoonIcon.classList.add('hidden');
    themeSunIcon.classList.remove('hidden');
  }

  // Navbar scroll behavior
  let lastScrollTop = 0;
  const navbarHeader = document.getElementById('navbar-header');

  window.addEventListener('scroll', () => {
    const currentScrollTop =
      window.pageYOffset || document.documentElement.scrollTop;

    if (currentScrollTop > lastScrollTop && currentScrollTop > 100) {
      navbarHeader.classList.add('-translate-y-full');

      if (navbar && !navbar.classList.contains('hidden')) {
        if (navbarXIcon) navbarXIcon.classList.add('hidden');
        if (navbarMenuIcon) navbarMenuIcon.classList.remove('hidden');
        navbar.classList.add('hidden', '-translate-y-[200%]');
        document.body.style.transition = 'padding-top 0.5s ease-in-out';
        document.body.style.paddingTop = '80px';
      }
    } else if (currentScrollTop < lastScrollTop) {
      navbarHeader.classList.remove('-translate-y-full');
    }

    lastScrollTop = Math.max(currentScrollTop, 0);
  });

  // Glass Navigation functionality (Desktop only)
  document.addEventListener('DOMContentLoaded', () => {
    const glassNavLabels = document.querySelectorAll(
      '.glass-nav-wrapper label'
    );
    const mobileNavLinks = document.querySelectorAll('#navbar-links a');

    // Handle glass nav clicks with smooth scroll
    glassNavLabels.forEach((label) => {
      label.addEventListener('click', (e) => {
        e.preventDefault();
        const target = label.getAttribute('data-target');
        if (target) {
          const element = document.querySelector(target);
          if (element) {
            element.scrollIntoView({
              behavior: 'smooth',
              block: 'start',
            });
          }
        }
      });
    });

    // Handle mobile nav clicks with smooth scroll
    mobileNavLinks.forEach((link) => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const target = link.getAttribute('href');
        if (target && target.startsWith('#')) {
          const element = document.querySelector(target);
          if (element) {
            element.scrollIntoView({
              behavior: 'smooth',
              block: 'start',
            });
          }

          // Close mobile menu
          if (navbarXIcon) navbarXIcon.classList.add('hidden');
          if (navbarMenuIcon) navbarMenuIcon.classList.remove('hidden');
          if (navbar) navbar.classList.add('hidden', '-translate-y-[200%]');
          document.body.style.transition = 'padding-top 0.5s ease-in-out';
          document.body.style.paddingTop = '80px';
        }
      });
    });

    // Update active section based on scroll position
    const sections = ['#tech-stack', '#projects', '#about', '#contact'];
    const radioInputs = [
      document.getElementById('glass-tech'),
      document.getElementById('glass-projects'),
      document.getElementById('glass-about'),
      document.getElementById('glass-contact'),
    ];

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const sectionId = entry.target.id;
            const sectionIndex = sections.findIndex(
              (s) => s === `#${sectionId}`
            );

            if (sectionIndex !== -1 && radioInputs[sectionIndex]) {
              radioInputs[sectionIndex].checked = true;
            }
          }
        });
      },
      {
        threshold: 0.6,
        rootMargin: '-20% 0px -20% 0px',
      }
    );

    // Observe all sections
    sections.forEach((sectionId) => {
      const element = document.querySelector(sectionId);
      if (element) {
        observer.observe(element);
      }
    });
  });
</script>
