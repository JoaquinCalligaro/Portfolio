---
import Card from '../cards/Card.astro';
import LocalizedText from '../language/LocalizedText.astro';

import SubmitBtn from '../ui/SubmitBtn.astro';
---

<Card className="rounded-xl">
  <form
    id="contact-form"
    action="/api/contact"
    method="post"
    class="contact-form w-full space-y-4 rounded-xl"
    novalidate
  >
    <div>
      <label
        for="name"
        class="block text-sm font-medium text-gray-700 dark:text-gray-300"
        ><LocalizedText key="contact.name" /></label
      >
      <input
        id="name"
        name="name"
        type="text"
        required
        class="mt-1 block w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-gray-900 shadow-sm transition-colors duration-150 focus:ring-2 focus:ring-indigo-500 focus:outline-none dark:border-neutral-700 dark:bg-gray-800 dark:text-gray-100"
      />
    </div>

    <div>
      <label
        for="email"
        class="block text-sm font-medium text-gray-700 dark:text-gray-300"
        ><LocalizedText key="contact.email" /></label
      >
      <input
        id="email"
        name="email"
        type="email"
        required
        class="mt-1 block w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-gray-900 shadow-sm transition-colors duration-150 focus:ring-2 focus:ring-indigo-500 focus:outline-none dark:border-neutral-700 dark:bg-gray-800 dark:text-gray-100"
      />
    </div>

    <div>
      <label
        for="message-editor"
        class="block text-sm font-medium text-gray-700 dark:text-gray-300"
        ><LocalizedText key="contact.message" /></label
      >

      <!-- Toolbar -->
      <div class="mt-2 mb-1 flex flex-wrap items-center gap-2">
        <button
          type="button"
          data-cmd="bold"
          class="rounded px-2 py-1 text-sm ring-1 ring-gray-200 transition-colors duration-150 hover:bg-gray-100 dark:text-white dark:ring-gray-700 dark:hover:bg-gray-700"
          >B</button
        >
        <button
          type="button"
          data-cmd="italic"
          class="rounded px-2 py-1 text-sm ring-1 ring-gray-200 transition-colors duration-150 hover:bg-gray-100 dark:text-white dark:ring-gray-700 dark:hover:bg-gray-700"
          >I</button
        >
        <button
          type="button"
          data-cmd="underline"
          class="rounded px-2 py-1 text-sm ring-1 ring-gray-200 transition-colors duration-150 hover:bg-gray-100 dark:text-white dark:ring-gray-700 dark:hover:bg-gray-700"
          >U</button
        >

        <select
          id="font-family"
          class="rounded px-2 py-1 text-sm ring-1 ring-gray-200 transition-colors duration-150 dark:bg-gray-800 dark:text-gray-100 dark:ring-gray-700"
        >
          <option value="inherit"><LocalizedText key="contact.font" /></option>
          <option value="Arial">Arial</option>
          <option value="Georgia">Georgia</option>
          <option value="Times New Roman">Times New Roman</option>
          <option value="Courier New">Courier New</option>
        </select>

        <select
          id="font-size"
          class="rounded px-2 py-1 text-sm ring-1 ring-gray-200 transition-colors duration-150 dark:bg-gray-800 dark:text-gray-100 dark:ring-gray-700"
        >
          <option value="3"><LocalizedText key="contact.size" /></option>
          <option value="1">XS</option>
          <option value="2">S</option>
          <option value="3">M</option>
          <option value="4">L</option>
          <option value="5">XL</option>
          <option value="6">XXL</option>
        </select>
      </div>

      <!-- Editor -->
      <div
        id="message-editor"
        contenteditable="true"
        aria-label="Mensaje"
        role="textbox"
        class="mt-1 min-h-[120px] w-full rounded-md border border-gray-300 bg-white p-3 text-sm shadow-sm transition-colors duration-150 focus:ring-2 focus:ring-indigo-500 focus:outline-none dark:border-neutral-700 dark:bg-gray-800 dark:text-gray-100"
      >
      </div>

      <!-- Hidden input to submit HTML content -->
      <input type="hidden" id="message" name="message" />
    </div>

    <!-- Attachments area -->
    <div>
      <label
        for="file-input"
        class="block text-sm font-medium text-gray-700 dark:text-gray-300"
        ><LocalizedText key="contact.attachments" /></label
      >

      <div
        id="drop-area"
        class="mt-1 flex max-w-full flex-col gap-2 rounded-md border-2 border-dashed border-gray-300 p-4 text-sm text-gray-600 transition-colors duration-150 dark:border-neutral-700 dark:bg-gray-900 dark:text-gray-300"
      >
        <p class="mb-2"><LocalizedText key="contact.dragDropText" /></p>
        <div class="flex items-center gap-3">
          <label
            for="file-input"
            class="inline-flex cursor-pointer items-center rounded-md bg-white px-3 py-1 text-sm font-medium text-gray-800 ring-1 ring-gray-200 transition-colors duration-150 hover:bg-gray-50 dark:bg-gray-800 dark:text-gray-100 dark:ring-gray-700 dark:hover:bg-gray-700"
            ><LocalizedText key="contact.attachButton" /></label
          >
          <input
            id="file-input"
            name="attachments"
            type="file"
            multiple
            class="hidden"
          />
          <span id="attachments-summary" class="text-sm text-gray-500"></span>
        </div>

        <ul id="attachments-list" class="mt-2 flex flex-col gap-2"></ul>
      </div>
    </div>

    <!-- Honeypot: bots will fill this; real users won't. Use sr-only for accessibility -->
    <label for="website" class="sr-only">Website</label>
    <input
      id="website"
      name="website"
      type="text"
      autocomplete="off"
      tabindex="-1"
      class="sr-only"
    />

    <div class="flex items-center justify-start gap-3">
      <SubmitBtn id="submit-btn"><LocalizedText key="contact.send" /></SubmitBtn
      >
      <div
        id="form-status"
        role="status"
        aria-live="polite"
        class="text-sm"
        style="min-height:1rem"
      >
      </div>
    </div>
  </form>

  <script type="module">
    const form = document.getElementById('contact-form');
    const status = document.getElementById('form-status');
    const submitBtn = document.getElementById('submit-btn');
    const fileInput = document.getElementById('file-input');
    const dropArea = document.getElementById('drop-area');
    const attachmentsList = document.getElementById('attachments-list');
    const attachmentsSummary = document.getElementById('attachments-summary');

    // attachments state
    const MAX_FILES = 5;
    const MAX_SIZE_MB = 5; // per file
    let attachments = []; // { file, id }

    function updateAttachmentsUI() {
      attachmentsList.innerHTML = '';
      attachments.forEach((a) => {
        const li = document.createElement('li');
        li.className =
          'flex items-center justify-between gap-3 rounded-md bg-gray-50 p-2 dark:bg-gray-800';

        const info = document.createElement('div');
        info.className = 'flex items-center gap-3';

        if (a.file.type.startsWith('image/')) {
          const img = document.createElement('img');
          img.src = URL.createObjectURL(a.file);
          img.className = 'h-12 w-12 rounded-md object-cover';
          info.appendChild(img);
        }

        const meta = document.createElement('div');
        meta.innerHTML = `<div class="text-sm font-medium text-gray-900 dark:text-gray-100">${a.file.name}</div><div class="text-xs text-gray-500 dark:text-gray-400">${(a.file.size / 1024 / 1024).toFixed(2)} MB</div>`;
        info.appendChild(meta);

        const removeBtn = document.createElement('button');
        removeBtn.type = 'button';
        removeBtn.className = 'ml-auto text-sm text-red-600 dark:text-red-400';
        removeBtn.innerText = 'Eliminar';
        removeBtn.addEventListener('click', () => {
          URL.revokeObjectURL(a.file);
          attachments = attachments.filter((x) => x.id !== a.id);
          updateAttachmentsUI();
        });

        li.appendChild(info);
        li.appendChild(removeBtn);
        attachmentsList.appendChild(li);
      });

      attachmentsSummary.textContent = attachments.length
        ? `${attachments.length} archivo(s) adjuntado(s)`
        : '';
    }

    function handleFiles(files) {
      const toAdd = Array.from(files);
      for (const f of toAdd) {
        if (attachments.length >= MAX_FILES) break;
        if (f.size / 1024 / 1024 > MAX_SIZE_MB) {
          alert(
            `El archivo ${f.name} excede el tamaño máximo de ${MAX_SIZE_MB}MB`
          );
          continue;
        }
        attachments.push({
          file: f,
          id: crypto.randomUUID
            ? crypto.randomUUID()
            : Date.now() + Math.random(),
        });
      }
      updateAttachmentsUI();
    }

    // file input change
    if (fileInput) {
      fileInput.addEventListener('change', (ev) => {
        handleFiles(ev.target.files || []);
        fileInput.value = '';
      });
    }

    // drag & drop
    if (dropArea) {
      ['dragenter', 'dragover'].forEach((evt) => {
        dropArea.addEventListener(evt, (e) => {
          e.preventDefault();
          // highlight for light and dark
          dropArea.classList.add(
            'bg-gray-100',
            'ring-2',
            'ring-indigo-400',
            'dark:ring-indigo-500',
            'dark:bg-gray-800'
          );
        });
      });
      ['dragleave', 'drop'].forEach((evt) => {
        dropArea.addEventListener(evt, (e) => {
          e.preventDefault();
          dropArea.classList.remove(
            'bg-gray-100',
            'ring-2',
            'ring-indigo-400',
            'dark:ring-indigo-500',
            'dark:bg-gray-800'
          );
        });
      });
      dropArea.addEventListener('drop', (e) => {
        const dt = e.dataTransfer;
        if (dt && dt.files) handleFiles(dt.files);
      });
      // allow clicking the label to trigger file input
      dropArea
        .querySelector('label[for="file-input"]')
        .addEventListener('click', () => fileInput.click());
    }

    // Rich text editor toolbar
    const editor = document.getElementById('message-editor');
    const hiddenMessage = document.getElementById('message');
    const toolbarAttach = document.getElementById('toolbar-attach');
    const fontFamily = document.getElementById('font-family');
    const fontSize = document.getElementById('font-size');

    function exec(cmd, value = null) {
      document.execCommand(cmd, false, value);
      editor.focus();
    }

    document.querySelectorAll('[data-cmd]').forEach((btn) => {
      btn.addEventListener('click', () => exec(btn.dataset.cmd));
    });

    if (fontFamily)
      fontFamily.addEventListener('change', (e) =>
        exec('fontName', e.target.value)
      );
    if (fontSize)
      fontSize.addEventListener('change', (e) =>
        exec('fontSize', e.target.value)
      );
    if (toolbarAttach)
      toolbarAttach.addEventListener('click', () => fileInput.click());

    // ensure editor content is submitted
    function syncEditor() {
      if (hiddenMessage) hiddenMessage.value = editor ? editor.innerHTML : '';
    }

    if (form) {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        status.textContent = '';
        status.className = 'text-sm';
        submitBtn.disabled = true;
        const originalBtnText = submitBtn.textContent;
        submitBtn.textContent = 'Enviando...';

        try {
          // sync rich editor to hidden input
          syncEditor();
          const fd = new FormData(form);
          // append attachments
          attachments.forEach((a) =>
            fd.append('attachments', a.file, a.file.name)
          );

          // progressive enhancement: use fetch to send FormData (server expects form-type)
          const res = await fetch(form.action, { method: 'POST', body: fd });
          const json = await res.json().catch(() => ({ ok: res.ok }));

          if (res.ok && json.ok !== false) {
            status.textContent = 'Mensaje enviado. Gracias!';
            status.classList.add('text-green-600');
            status.classList.remove('text-red-600');
            form.reset();
          } else {
            status.textContent =
              json?.error || 'Ocurrió un error al enviar. Intenta de nuevo.';
            status.classList.add('text-red-600');
            status.classList.remove('text-green-600');
          }
        } catch {
          status.textContent =
            'Ocurrió un error de conexión. Intenta más tarde.';
          status.classList.add('text-red-600');
          status.classList.remove('text-green-600');
        } finally {
          submitBtn.disabled = false;
          submitBtn.textContent = originalBtnText || 'Enviar';
        }
      });
    }
  </script>
</Card>
